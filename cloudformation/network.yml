AWSTemplateFormatVersion: "2010-09-09"
Description: Template generated by rain

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 Key Pair to allow SSH access to the instance
  Env:
    Type: String
    Default: test
  EC2InstanceType:
    Type: String
    Default: t2.micro 
    AllowedValues: [t2.micro, t3.micro]
    Description: Enter t2.micro or t3.micro
  EC2AMIID:
    Type: String
    Default: ami-032d6db78f84e8bf5
  EC2LaunchTemplateVersion:
    Type: String
    Default: 1

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Env}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Env}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 1
          - 8
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pubsub-1a

  PublicRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pub-routetable-1a

  PublicSubnetRouteTable1aAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1a
      SubnetId: !Ref PublicSubnet1a

  PublicRoute1a:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable1a

  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 2
          - 8
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pubsub-1c

  PublicRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pub-routetable-1c

  PublicSubnetRouteTable1cAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1c
      SubnetId: !Ref PublicSubnet1c

  PublicRoute1c:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable1c

  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 3
          - 8
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-prisub

  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 3
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 4
          - 8
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-prisub

  PrivateRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pri-routetable

  PrivateRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Env}-pri-routetable

  PrivateSubnetRouteTable1aAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1a
      SubnetId: !Ref PrivateSubnet1a

  PrivateSubnetRouteTable1cAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1c
      SubnetId: !Ref PrivateSubnet1c

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Security Group
      GroupName: web-secgroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${Env}-web-secgroup
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Security Group
      GroupName: db-secgroup
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebSecurityGroup
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub ${Env}-db-secgroup
      VpcId: !Ref VPC

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  EC2EnableAccessS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2FullAccessS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "s3:*"
          Resource:
            - "arn:aws:s3:::*"
      Roles:
      - !Ref EC2InstanceRole

  EC2EnableAccessCloudWatch:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2FullAccessCloudWatchPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "cloudwatch:*"
          Resource:
            - "arn:aws:cloudwatch:::*"
      Roles:
      - !Ref EC2InstanceRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${Env}-ec2

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EC2Template
      LaunchTemplateData:
        ImageId: !Ref EC2AMIID
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnet
            Groups:
              - !Ref WebSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: 8
              VolumeType: gp2
        UserData:
          Fn::Base64: |
            sudo yum -y install git nginx php amazon-cloudwatch-agent posgresql
        InstanceInitiatedShutdownBehavior: stop
          #TagSpecifications:
          #  - ResourceType: instance
          #    Tags:
          #      - Key: Name
          #        Value: !Sub ${Env}-web


  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: ap-northeast-1a
      MultiAZ: false
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Ref Env
      Engine: postgres
      EngineVersion: 13.5
      MasterUserPassword: testpass
      MasterUsername: testuser
      DBName: test
      Port: 5432
      StorageType: standard
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBParameterGroupName: !Ref DBParameterGroup
        #OptionGroupName: !Ref OptionGroup
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      StorageEncrypted: false
      BackupRetentionPeriod: 30
      CopyTagsToSnapshot: false
      DeleteAutomatedBackups: true
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}-db
        # EnableCloudwatchLogsExports:
        #   - CHANGEME
        # PerformanceInsightsRetentionPeriod: 0 # Optional
        # PerformanceInsightsKMSKeyId: CHANGEME # Optional
        # MonitoringInterval: 0 # Optional
        # MonitoringRoleArn: CHANGEME # Optional

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${Env}-dbsubnet
      DBSubnetGroupDescription: test subnet group
      SubnetIds:
        - !Ref PrivateSubnet1a
        - !Ref PrivateSubnet1c

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: test db parametergroup
      Family: postgres13
        #Parameters:
        #  CHANGEME:
      Tags:
        - Key: Name
          Value: !Sub ${Env}-db

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Env}-elb
      Type: application
      IpAddressType: dualstack
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1c
      SecurityGroups:
        - !Ref ELBSecurityGroup
      LoadBalancerAttributes:
        - Key: deletion_protection
          Value: false
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: elb-logging
        - Key: access_logs.s3.prefix
          Value: !Sub ${Env}-
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: defensive
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: false
        - Key: waf.fail_open.enabled
          Value: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}-elb

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Env}-targetgroup
      VpcId: !Ref VpcId
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      TargetType: alb
      Targets:
        - Id: !GetAtt LoadBalancer.Arn
          Port: 443
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: app_cookie
        - Key: stickiness.app_cookie.cookie_name
          Value: ALB_COOKIE
        - Key: stickiness.app_cookie.duration_seconds
          Value: 604800
        - Key: load_balancing.algorithm.type
          Value: round_robin
        - Key: slow_start.duration_seconds
          Value: 0
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Tags:
        - Key: Name
          Value: !Sub ${Env}-targetgroup

  ELBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !GetAtt LoadBalancer.Arn
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Order: 1
          Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'

  ELBListener80MaintainanceModeRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ELBListener80
      Actions:
        - Order: 2
          Type: fixed-response
          FixedResponseConfig:
            StatusCode: 503
            ContentType: text/html
            MessageBody: | 
              Fn::Base64:
                CHANGEME
      Priority: 2

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: VpcId
  PublicSubnet:
    Value: !Ref PublicSubnet
    Export:
      Name: PublicSubnet
  PrivateSubnet1a:
    Value: !Ref PrivateSubnet1a
    Export:
      Name: PrivateSubnet1a
  PrivateSubnet1c:
    Value: !Ref PrivateSubnet1c
    Export:
      Name: PrivateSubnet1c
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
    Export:
      Name: WebSecurirtyGroup
  DBSecurityGroup:
    Value: !Ref DBSecurityGroup
    Export:
      Name: DBSecurityGroup



