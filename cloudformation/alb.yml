AWSTemplateFormatVersion: "2010-09-09"
Description: Template generated by rain

Parameters:

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      GroupName: !Sub ${Env}-elb-secgroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${Env}-elb-secgroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Env}-elb
      Type: application
      IpAddressType: dualstack
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1c
      SecurityGroups:
        - !Ref ELBSecurityGroup
      LoadBalancerAttributes:
        - Key: deletion_protection
          Value: false
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: elb-logging
        - Key: access_logs.s3.prefix
          Value: !Sub ${Env}-
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: defensive
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: false
        - Key: waf.fail_open.enabled
          Value: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}-elb
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Env}-targetgroup
      VpcId: !Ref VpcId
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP2
      TargetType: alb
      Targets:
        - Id: !GetAtt LoadBalancer.Arn
          Port: 443
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: app_cookie
        - Key: stickiness.app_cookie.cookie_name
          Value: ALB_COOKIE
        - Key: stickiness.app_cookie.duration_seconds
          Value: 604800
        - Key: load_balancing.algorithm.type
          Value: round_robin
        - Key: slow_start.duration_seconds
          Value: 0
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Tags:
        - Key: Name
          Value: !Sub ${Env}-targetgroup
  
  ELBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !GetAtt LoadBalancer.Arn
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Order: 1
          Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'
  
  ELBListener80MaintainanceModeRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ELBListener80
      Actions:
        - Order: 2
          Type: fixed-response
          FixedResponseConfig:
            StatusCode: 503
            ContentType: text/html
            MessageBody: | 
              Fn::Base64:
                CHANGEME
      Priority: 2

Outputs:
